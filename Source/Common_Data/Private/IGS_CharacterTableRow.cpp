#include "IGS_CharacterTableRow.h"
#include "GameplayTagContainer.h"
#include "EIGS_DialogueHeisterCharacter.h"

FIGS_CharacterTableRow::FIGS_CharacterTableRow() {
    auto gen = TBaseStructure<FGameplayTag>::Get()->FindPropertyByName("TagName");
    (*gen->ContainerPtrToValuePtr<FName>(&(*this).TagID, 0)) = NAME_None;
    (*this).ID = EIGS_CharacterID::Char_Unknown;
    (*this).bIsGeneric = false;
    (*this).bUseInRandomPool = false;
    (*this).UniqueNormalClasses.bIsMale = true;
    (*this).UniqueNormalClasses.bIsMutable = false;
    (*this).UniqueNormalClasses.MutableProfile = FSoftObjectPath();
    (*this).UniqueNormalClasses.PlayerPawnClass = FSoftObjectPath();
    (*this).UniqueNormalClasses.BotPawnClass = FSoftObjectPath();
    (*this).UniqueNormalClasses.PaperDollClass = FSoftObjectPath();
    (*this).UniqueNormalClasses.FPVArmsClass = FSoftObjectPath();
    (*this).UniqueNormalClasses.CharacterIcon = FSoftObjectPath();
    (*this).UniqueNormalClasses.MetaCharacterIcon = FSoftObjectPath();
    (*this).UniqueNormalClasses.VariantName = FText::GetEmpty();
    (*this).UniqueNormalClasses.VariantDescription = FText::GetEmpty();
    (*this).UniqueNormalClasses.DialogueID = EIGS_DialogueHeisterCharacter::None;
    (*this).UniqueLeveledClasses.bIsMale = true;
    (*this).UniqueLeveledClasses.bIsMutable = false;
    (*this).UniqueLeveledClasses.MutableProfile = FSoftObjectPath();
    (*this).UniqueLeveledClasses.PlayerPawnClass = FSoftObjectPath();
    (*this).UniqueLeveledClasses.BotPawnClass = FSoftObjectPath();
    (*this).UniqueLeveledClasses.PaperDollClass = FSoftObjectPath();
    (*this).UniqueLeveledClasses.FPVArmsClass = FSoftObjectPath();
    (*this).UniqueLeveledClasses.CharacterIcon = FSoftObjectPath();
    (*this).UniqueLeveledClasses.MetaCharacterIcon = FSoftObjectPath();
    (*this).UniqueLeveledClasses.VariantName = FText::GetEmpty();
    (*this).UniqueLeveledClasses.VariantDescription = FText::GetEmpty();
    (*this).UniqueLeveledClasses.DialogueID = EIGS_DialogueHeisterCharacter::None;
    (*this).GenericVariants = {};
    (*this).DefaultLoadout.PrimaryWeapon = nullptr;
    (*gen->ContainerPtrToValuePtr<FName>(&(*this).DefaultLoadout.PrimaryWeaponSkin, 0)) = NAME_None;
    (*this).DefaultLoadout.SecondaryWeapon = nullptr;
    (*gen->ContainerPtrToValuePtr<FName>(&(*this).DefaultLoadout.SecondaryWeaponSkin, 0)) = NAME_None;
    (*this).DefaultLoadout.Equipment = {};
    (*this).DefaultLoadout.Perks = {};
    (*this).DefaultLoadout.Ability1ChargesLeft = -1;
    (*gen->ContainerPtrToValuePtr<FName>(&(*this).DefaultLoadout.CharacterSkinID, 0)) = NAME_None;
    (*this).Traits.MaxHealth = 960;
    (*this).Traits.ReviveCount = 3;
    auto gen2 = TBaseStructure<FGameplayTagQuery>::Get()->FindPropertyByName("TokenStreamVersion");
    (*gen2->ContainerPtrToValuePtr<int32>(&(*this).Traits.AllowedWieldables, 0)) = 0;
    FGameplayTag gen3;
    (*gen->ContainerPtrToValuePtr<FName>(&gen3, 0)) = TEXT("Item.Wieldable");
    auto gen4 = TBaseStructure<FGameplayTagQuery>::Get()->FindPropertyByName("TagDictionary");
    (*gen4->ContainerPtrToValuePtr<TArray<FGameplayTag>>(&(*this).Traits.AllowedWieldables, 0)) = {MoveTemp(gen3)};
    auto gen5 = TBaseStructure<FGameplayTagQuery>::Get()->FindPropertyByName("QueryTokenStream");
    (*gen5->ContainerPtrToValuePtr<TArray<uint8>>(&(*this).Traits.AllowedWieldables, 0)) = {0, 1, 2, 1, 0};
    auto gen6 = TBaseStructure<FGameplayTagQuery>::Get()->FindPropertyByName("UserDescription");
    (*gen6->ContainerPtrToValuePtr<FString>(&(*this).Traits.AllowedWieldables, 0)) = TEXT("");
    auto gen7 = TBaseStructure<FGameplayTagQuery>::Get()->FindPropertyByName("AutoDescription");
    (*gen7->ContainerPtrToValuePtr<FString>(&(*this).Traits.AllowedWieldables, 0)) = TEXT("");
    (*this).CharacterName = FText::GetEmpty();
    (*this).Description = FText::GetEmpty();
    (*this).Class = nullptr;
    (*this).CharacterWieldable3PVModelScaleMultiplier = 1.000000000e+00f;
    (*this).CharacterWieldableFPVModelScaleMultiplier = 1.000000000e+00f;
    (*this).MetaData.CharacterQuality = EMETA_ItemQuality::MinGenerate;
    (*this).MetaData.PerkTags = {};
    (*this).MetaData.Perks = {};
    (*this).Quality = EMETA_ItemQuality::MinGenerate;
    (*this).UnlockProperties.IsUnlockable = false;
    auto gen8 = TBaseStructure<FGameplayTagContainer>::Get()->FindPropertyByName("GameplayTags");
    (*gen8->ContainerPtrToValuePtr<TArray<FGameplayTag>>(&(*this).UnlockProperties.RequiredTags, 0)) = {};
    auto gen9 = TBaseStructure<FGameplayTagContainer>::Get()->FindPropertyByName("ParentTags");
    (*gen9->ContainerPtrToValuePtr<TArray<FGameplayTag>>(&(*this).UnlockProperties.RequiredTags, 0)) = {};
    (*this).UnlockProperties.RequiredValue = 0.000000000e+00f;
    (*this).UnlockProperties.ShowIfNotOwned = true;
    (*this).UnlockProperties.UnlockCoverImage = FSoftObjectPath();
}
